#!/bin/bash

set -e

application_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function cleanup {
  if mount | grep -q ${application_dir}/output/rootfs; then
     sudo umount ${application_dir}/output/rootfs
  fi

  if mount | grep -q ${application_dir}/output/boot; then
     sudo umount ${application_dir}/output/boot
  fi

  log "Unfortunately the conversion failed. Check $build_log for details."
  exit 1
}
trap cleanup ERR

show_help() {
cat << EOF

Mender conversion tool

A tool that takes an existing embedded image (Debian, Ubuntu, Raspbian, etc)
and converts it to a Mender image by restructuring partition table and adding
necessary files.

Usage: $0 COMMAND [options]

General commands:

        from-raw-disk-image                     - composes fully functional Mender
                                                  image compliant with Mender
                                                  partition layout, having all
                                                  necessary files installed
        mender-disk-image-to-artifact           - creates Mender artifact file
                                                  from Mender image

Expert commands:

        raw-disk-extract-images                 - extracts raw disk image content

Options: [-r|--raw-disk-image | -m|--mender-disk-image | -s|--data-part-size-mb |
          -d|--device-type | -p|--rootfs-partition-id | -i|--demo-host-ip |
          -c|--server-cert | -u|--server-url | -t|--tenant-token |
          -g|--mender-client -b|--bootloader-toolchain | -a|--artifact-name]

        raw-disk-image       - raw disk embedded Linux (Debian, Raspbian,
                               Ubuntu, etc.) image path
        mender-disk-image    - Mender disk image name where the script writes to
                               should have "sdimg" suffix
        data-part-size-mb    - data partition size in MB; default value 128MB
        device-type          - target device identification used to build
                               Mender image
        rootfs-partition-id  - selects root filesystem (primary|secondary)
                               as the source filesystem for an artifact
        demo-host-ip         - server demo ip used for testing purposes
        server-cert          - server certificate file
        server-url           - production server url
        tenant-token         - Mender tenant token
        mender-client        - Mender client binary
        bootloader-toolchain - GNU Arm Embedded Toolchain
        artifact-name        - Mender artifact name

Examples:

    To create fully functional Mender image from raw disk image in a single step:

        ./mender-convert from-raw-disk-image
                --raw-disk-image <raw_disk_image_path>
                [--mender-disk-image <mender_image_name>]
                --device-type <beaglebone | raspberrypi3>
                --mender-client <mender_binary_path>
                --artifact-name release-1_1.5.0
                --bootloader-toolchain arm-linux-gnueabihf
                --demo-host-ip 192.168.10.2

        Output:
            - Mender image: ready to use image with client and bootloader installed
            - Mender artifact: update file based on the already built Mender image
            - Mender root filesystem: EXT4 image used to produce the Mender artifact

    To create Mender artifact file from Mender image:

        ./mender-convert mender-disk-image-to-artifact
                --mender-disk-image <mender_image_path>
                --device-type <beaglebone | raspberrypi3>
                --artifact-name release-1_1.5.0
                --rootfs-partition-id <primary | secondary>

        Note: artifact name format is: release-<release_no>_<mender_version>

Examples for expert actions:

    To extract raw disk image content:

        ./mender-convert raw-disk-extract-images
                --raw-disk-image <raw_disk_image_path>

	Output: repartitioned (respectively to Mender layout) raw disk image

EOF
}

if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

tool_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Default sector size
sector_size=
# Boot partition start in sectors (512 bytes per sector).
pboot_start=
# Default 'boot' partition size in sectors: 16MB
# (i.e 16777216 bytes, equals to 'partition_alignment' * 2)
pboot_size=
# Default 'data' partition size in MiB.
data_part_size_mb=128
# Data partition size in sectors.
pdata_size=
# Exemplary values for Beaglebone: 9.3: 4521984 9.4: 4423680
prootfs_size=
# Partition type, e.g:
#    83 (Linux native partition)
#    8e (Linux Logical Volume Manager partition)
prootfs_id=

mender_disk_image=
raw_disk_image=
device_type=
mender_disk_counts=
artifact_name=
rootfs_partition_id=
raw_disk_counts=
mender_client=
# Mender production certificate.
server_cert=
# Mender production server url.
server_url=
# Mender demo server IP address.
demo_host_ip=
# Mender hosted token.
tenant_token=

# Conversion progress.
declare -i step=1
declare -i total=

declare -a rootfs_partition_ids=("primary" "secondary")
declare -a mender_disk_mappings
declare -a raw_disk_mappings

do_raw_extract_images() {
  log "$step/$total Extracting images from raw disk image..."
  ((step++))

  if [ -z "$raw_disk_image" ] || [ -z "$device_type" ] || \
     [ -z "$artifact_name" ]; then
    show_help
    return 1
  fi

  if [[ ! -f ${raw_disk_image} ]]; then
    log "Raw disk image not found. Aborting."
    return 1
  fi

  # Change current directory to 'output' directory.
  cd $output_dir

  # Make sure the user's given Mender image name has a correct extension.
  # If Mender image name is not provided, then use following syntax:
  # mender-<device_name>-<artifact_name>.sdimg
  if [ -n "${mender_disk_image}" ]; then
    local mender_disk_basename=$(basename -- "$mender_disk_image")
    if [[ $mender_disk_basename =~ \.sdimg$ ]]; then
      mender_disk_image=$output_dir/$mender_disk_basename
    else
      local mender_disk_filename="${mender_disk_basename%.*}"
      mender_disk_image=$output_dir/${mender_disk_filename}.sdimg
    fi
  else
    mender_disk_image=$output_dir/mender-${device_type}-${artifact_name}.sdimg
  fi

  mender_rootfs_image=${output_dir}/rootfs.img

  analyse_raw_disk_image ${raw_disk_image} pboot_start pboot_size \
                         prootfs_start prootfs_size sector_size \
                         raw_disk_counts prootfs_id

  [ -z "${prootfs_size}" ] && \
    { log "root filesystem size not set. Aborting."; return 1; }

  log "\tDetected raw disk image with $raw_disk_counts partition(s)."

  if [[ ${raw_disk_counts} -gt 1 ]]; then
    log "\tExtracting boot partition from raw disk image."

    extract_file_from_image ${raw_disk_image} ${pboot_start} \
                          ${pboot_size} "boot.img"
  else
    log "\tGenerating boot partition (required, does not exist in original image)"

    # We need to fake some data here
    pboot_size=102400

    dd if=/dev/zero of=${output_dir}/boot.img count=${pboot_size} bs=512 >> "$build_log" 2>&1
    mkfs.vfat ${output_dir}/boot.img >> "$build_log" 2>&1
  fi

  log "\tExtracting root filesystem partition from raw disk image."
  extract_file_from_image ${raw_disk_image} ${prootfs_start} \
                          ${prootfs_size} "rootfs.img"

  create_test_config_file $device_type $pboot_start \
                          $pboot_size $prootfs_size $sector_size

}

do_install_mender() {
  log "$step/$total Installing Mender..."
  ((step++))

  if [ -z "$device_type" ] || \
     [ -z "$mender_client" ] || [ -z "$artifact_name" ]; then
    show_help
    return 1
  fi

  mkdir -p ${output_dir}/data ${output_dir}/rootfs

  stage_4_args="-r ${output_dir}/rootfs -d ${output_dir}/data -D ${device_type} \
                -g ${mender_client} -a ${artifact_name}"

  if [ -n "$demo_host_ip" ]; then
    stage_4_args="${stage_4_args} -i ${demo_host_ip}"
  fi

  if [ -n "$server_cert" ]; then
    stage_4_args="${stage_4_args} -c ${server_cert}"
  fi

  if [ -n "$server_url" ]; then
    stage_4_args="${stage_4_args} -u ${server_url}"
  fi

  if [ -n "${tenant_token}" ]; then
    stage_4_args="${stage_4_args} -t ${tenant_token}"
  fi

  eval set -- " ${stage_4_args}"

  ${tool_dir}/convert-stage-4.sh ${stage_4_args}

  # Update test configuration file
  update_test_config_file $device_type artifact-name $artifact_name
}

do_mender_data_part() {
  log "\tCreating a data part file-system image"

  # Extract file-system type from rootfs
  if file ${output_dir}/rootfs.img | grep -q ext4; then
    data_file_extensions="ext4"
  elif file ${output_dir}/rootfs.img | grep -q xfs; then
    data_file_extensions="xfs"
  else
    log "\tCould not determinate root file-system type. Aborting..."
    exit 1
  fi

  dd if=/dev/zero of=${output_dir}/data.img seek=${data_part_size_mb} count=0 bs=1M >> "$build_log" 2>&1

  sudo mkfs.${data_file_extensions} -F ${output_dir}/data.img >> "$build_log" 2>&1

  mkdir -p ${output_dir}/data-output
  sudo mount ${output_dir}/data.img ${output_dir}/data-output
  sudo rsync -SaqP --delete ${output_dir}/data/ ${output_dir}/data-output/ >> "$build_log" 2>&1
  sudo umount ${output_dir}/data-output
}

do_mender_artifact() {
  log "$step/$total Create Mender Artifact"
  ((step++))

  if [ -z "${device_type}" ]; then
    log "Target device_type name not set. Aborting."
    return 1
  fi

  if [ -z "${artifact_name}" ]; then
    log "Artifact name not set. Aborting."
    return 1
  fi

  local mender_disk_basename=$(basename -- "$mender_disk_image")
  local mender_disk_filename="${mender_disk_basename%.*}"
  local mender_rootfs_basename=${mender_disk_filename}.fs.img
  mender_rootfs_image=${output_dir}/$mender_rootfs_basename

  ln -sf ${output_dir}/rootfs.img ${mender_rootfs_image}

  # Note: expected Mender Artifact name follows the scheme:
  # mender-<device_name>-<artifact_name>.mender.
  mender_artifact=${output_dir}/${mender_disk_filename}.mender

  #Create Mender artifact
  mender-artifact write rootfs-image \
    --update ${mender_rootfs_image} \
    --output-path ${mender_artifact} \
    --artifact-name ${artifact_name} \
    --device-type ${device_type}
}

do_mender_disk_image() {
  log "$step/$total Create Mender disk image..."
  ((step++))

  if [ -z "$raw_disk_image" ] || [ -z "$device_type" ] || \
     [ -z "$artifact_name" ]; then
    show_help
    return 1
  fi

  local mender_disk_image_size=
  calculate_mender_disk_size $pboot_start $pboot_size  \
                             $prootfs_size $data_part_size_mb  \
                             $sector_size pdata_size mender_disk_image_size

  log "\tCreating Mender disk image:\
       \n\t\timage size: ${mender_disk_image_size} bytes\
       \n\t\tboot partition size: $((${pboot_size} * $sector_size)) bytes\
       \n\t\troot filesystem size: $((${prootfs_size} * $sector_size)) bytes\
       \n\t\tdata partition size: $(($pdata_size * $sector_size)) bytes"

  create_mender_disk $mender_disk_image $mender_disk_image_size
  format_mender_disk $mender_disk_image $mender_disk_image_size $pboot_start \
                     $pboot_size $prootfs_size $pdata_size $sector_size
  verify_mender_disk $mender_disk_image mender_disk_counts

  create_device_maps $mender_disk_image mender_disk_mappings

  log "$step/$total Formatting repartitioned raw disk image..."
  ((step++))
  make_mender_disk_filesystem ${mender_disk_mappings[@]}

  detach_device_maps ${mender_disk_mappings[@]}
}

do_mender_disk_image_to_artifact() {
  log "$step/$total Creating Mender Artifact..."
  ((step++))

  if [ -z "${mender_disk_image}" ]; then
    log "Mender disk image not set. Aborting."
    return 1
  fi

  if [ -z "${device_type}" ]; then
    log "Target device_type name not set. Aborting."
    return 1
  fi

  if [ -z "${artifact_name}" ]; then
    log "Artifact name not set. Aborting."
    return 1
  fi

  if [ -z "${rootfs_partition_id}" ]; then
    log "\tRootfs partition id not set - 'primary' will be used by default."
    rootfs_partition_id="primary"
  fi

  local supported=$(echo ${supported_devices[@]} | grep -o $device_type | wc -w)

  [[ $supported -eq 0 ]] && \
      { log "Error: incorrect device type. Aborting."; return 1; }

  inarray=$(echo ${rootfs_partition_ids[@]} | grep -o $rootfs_partition_id | wc -w)

  [[ $inarray -eq 0 ]] && \
      { log "Error: invalid rootfs partition id provided. Aborting."; return 1; }

  local count=
  local bootstart=
  local rootfs_a_start=
  local rootfs_a_size=
  local rootfs_b_start=
  local rootfs_b_size=
  local rootfs_path=
  local sdimg_device_type=

  get_mender_disk_info $mender_disk_image count sector_size rootfs_a_start \
                       rootfs_a_size rootfs_b_start rootfs_b_size
  ret=$?
  [[ $ret -ne 0 ]] && \
      { log "Error: cannot validate Mender disk image. Aborting."; return 1; }

  # Check if device type matches.
  create_device_maps $mender_disk_image mender_disk_mappings
  mount_mender_disk ${mender_disk_mappings[@]}

  # Find .sdimg file's dedicated device type.
  mender_device_type=$( cat $sdimg_data_dir/mender/device_type | sed 's/[^=].*=//' )

  if [ "$mender_device_type" != "$device_type" ]; then
    log "Error: device types of Mender artifact & Mender not matching. Aborting."
    ret=1
  fi

  if ! [ -x "$(command -v mender-artifact)" ]; then
    log "Error: mender-artifact not found in PATH. Aborting."
    ret=1
  fi

  if [ $ret -eq 0 ]; then
    if [[ $rootfs_partition_id == "primary" ]]; then
      prootfs_start=$rootfs_a_start
      prootfs_size=$rootfs_a_size
      rootfs_path=$sdimg_primary_dir
    elif [[ $rootfs_partition_id == "secondary" ]]; then
      prootfs_start=$rootfs_b_start
      prootfs_size=$rootfs_b_size
      rootfs_path=$sdimg_secondary_dir
    fi

    local mender_disk_basename=$(basename -- "$mender_disk_image")
    local mender_disk_filename="${mender_disk_basename%.*}"
    local mender_rootfs_basename=${mender_disk_filename}.ext4
    mender_rootfs_image=${output_dir}/$mender_rootfs_basename

    # Extract root filesystem ext4 image to use it to generate Mender artifact.
    # Ext4 disk image will be also verified in acceptance tests.
    extract_file_from_image $mender_disk_image $prootfs_start \
                            $prootfs_size $mender_rootfs_basename

    fsck.ext4 -fp $mender_rootfs_image &> /dev/null || ret=$?
    [[ $ret -ne 0 ]] && \
        { log "Error: checking $mender_rootfs_basename file system failed. Aborting."; }

    # Find first available loopback device.
    loopdevice=($(sudo losetup -f || ret=$?))
    [[ $ret -ne 0 ]] && \
        { log "Error: cannot find an unused loop device. Aborting."; }

    if [ $ret -eq 0 ]; then
      #Mount extracted ext4 partition to verify 'artifact_info' file content.
      sudo losetup $loopdevice ${mender_rootfs_image}
      rootfs_mountpoint=${output_dir}/mnt/${rootfs_partition_id}
      mkdir -p ${rootfs_mountpoint}
      sudo mount $loopdevice ${rootfs_mountpoint}

      # Set 'artifact name' as passed in the command line.
      sudo sed -i '/^artifact/s/=.*$/='${artifact_name}'/' "${rootfs_mountpoint}/etc/mender/artifact_info"

      sudo umount -l ${rootfs_mountpoint}
      sudo losetup -d $loopdevice
      rm -rf ${output_dir}/mnt

      # Note: expected Mender Artifact name follows the scheme:
      # mender-<device_name>-<artifact_name>.mender.
      mender_artifact=${output_dir}/${mender_disk_filename}.mender
      log "\tWriting Mender artifact to: ${mender_artifact}"

      #Create Mender artifact
      mender-artifact write rootfs-image \
        --update ${mender_rootfs_image} \
        --output-path ${mender_artifact} \
        --artifact-name ${artifact_name} \
        --device-type ${device_type}

      ret=$?
      [[ $ret -eq 0 ]] && \
        { log "\tCreating Mender Artifact succeeded."; } || \
        { log "\tCreating Mender Artifact failed."; }
    fi
  fi

  # Clean and detach.
  detach_device_maps ${mender_disk_mappings[@]}

  rm -rf $sdimg_base_dir
  return $ret
}

do_from_raw_disk_image() {
  if [ -z "$raw_disk_image" ] || [ -z "$device_type" ] ||  \
     [ -z "$artifact_name" ] || [ -z "$mender_client" ] || \
     [ -z "$bootloader_toolchain" ]; then
    show_help
    return 1
  fi

  do_raw_extract_images

  mkdir -p ${output_dir}/boot ${output_dir}/rootfs

  log "$step/$total Mount extracted images"
  ((step++))

  sudo mount -o loop ${output_dir}/boot.img ${output_dir}/boot
  sudo mount -o loop ${output_dir}/rootfs.img ${output_dir}/rootfs

  log "$step/$total Performing platform specific conversion steps"
  ((step++))

  ${tool_dir}/convert-platform.sh ${bootloader_toolchain}

  do_install_mender

  log "$step/$total Un-mount extracted images"
  ((step++))

  sudo umount ${output_dir}/boot
  sudo umount ${output_dir}/rootfs

  sync

  do_mender_artifact

  do_mender_data_part

  sync

  do_mender_disk_image
}

PARAMS=""

# Load necessary functions.
source ${tool_dir}/mender-convert-functions.sh

export -f create_device_maps
export -f detach_device_maps
export -f mount_mender_disk
export -f log
export -f logsetup

# Before running any command first create output directory
# and configure where logs should be redirected.
mkdir -p $output_dir
logsetup

while (( "$#" )); do
  case "$1" in
    -p | --rootfs-partition-id)
      rootfs_partition_id=$2
      shift 2
      ;;
    -m | --mender-disk-image)
      mender_disk_image=$2
      shift 2
      ;;
    -r | --raw-disk-image)
      raw_disk_image=$(get_path $2)
      shift 2
      ;;
    -s | --data-part-size-mb)
      data_part_size_mb=$2
      shift 2
      ;;
    -d | --device-type)
      device_type=$2
      shift 2
      ;;
    -a | --artifact-name)
      artifact_name=$2
      shift 2
      ;;
    -g | --mender-client)
      mender_client=$(get_path $2)
      shift 2
      ;;
    -b | --bootloader-toolchain)
      bootloader_toolchain=$2
      shift 2
      ;;
    -i | --demo-host-ip)
      demo_host_ip=$2
      shift 2
      ;;
    -c | --server-cert)
      server_cert=$2
      shift 2
      ;;
    -u | --server-url)
      server_url=$2
      shift 2
      ;;
    -t | --tenant-token)
      tenant_token=$2
      shift 2
      ;;
    -h | --help)
      show_help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      log "Error: unsupported option $1"
      exit 1
      ;;
    *)
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

[ -z "${data_part_size_mb}" ] && \
    { log "Default 'data' partition size set to 128MB"; data_part_size_mb=128; }

eval set -- "$PARAMS"

# Some commands expect elevated privileges.
sudo true

case "$1" in
  raw-disk-extract-images)
    total=6
    do_raw_extract_images
    log "A new Mender disk image with partition layout to support Mender has been successfully created!"
    log "You can find the output Mender disk image at:\n\t${mender_disk_image}."
    ;;
  mender-disk-image-to-artifact)
    total=1
    do_mender_disk_image_to_artifact
    log "A Mender Artifact has been successfully extracted from your Mender disk image!"
    log "You can find the Mender Artifact at:\n\t$mender_artifact\nand use it to deploy updates."
    ;;
  from-raw-disk-image)
    total=9
    do_from_raw_disk_image
    log "Conversion complete!"
    log "The Mender disk image you can provision your device storage with is at:\
         \n\t${mender_disk_image}"
    log "The Mender root file system partition is at:\n\t${mender_rootfs_image}"
    log "The Mender Artifact you can upload to your Mender server to deploy to your devices is at:\
         \n\t${mender_artifact}"
    ;;
  *)
    show_help
    ;;
esac
