#!/bin/bash

# Default that can be overridden by providing this method in a
# configuration file passed with '--config'
function platform_modify() {
    true
}

function trap_exit() {
  echo "mender-convert-modify has finished. Cleaning..."
  sudo umount -f work/boot
  sudo umount -f work/rootfs
}

function trap_term() {
  echo "Program interrupted by user"
}

trap trap_term INT TERM
trap trap_exit EXIT

echo "Running $(basename $0): $@"

source modules/bootstrap.sh
source modules/disk.sh
source modules/probe.sh

while (( "$#" )); do
  case "$1" in
    -o | --overlay)
      overlays+="${2}"
      shift 2
      ;;
    -c | --config)
      configs+="${2}"
      shift 2
      ;;
    -d | --disk-image)
      disk_image="${2}"
      shift 2
      ;;
    *)
      echo "Sorry, but the provided option is not supported: $1"
      exit 1
      ;;
  esac
done

source modules/config.sh "${configs[@]}"

boot_part=$(disk_boot_part)
root_part=$(disk_root_part)

# Create mount points
mkdir -p work/boot
mkdir -p work/rootfs

sudo mount ${boot_part} work/boot
sudo mount ${root_part} work/rootfs

mkdir -p work/mender-deb/files

log_info "Installing Mender client and related files"

run_and_log_cmd "wget -Nq ${MENDER_STORAGE_DEB_URL}/${MENDER_CLIENT_DEB} -P work/mender-deb"

cd work/mender-deb
run_and_log_cmd "ar -xv ${MENDER_CLIENT_DEB}"
run_and_log_cmd "tar -xf data.tar.xz -C files"
cd - > /dev/null 2>&1

run_and_log_cmd "sudo rsync --archive --keep-dirlinks --verbose work/mender-deb/files/ work/rootfs/"

if [ "${MENDER_ENABLE_SYSTEMD}" == "y" ]; then
  run_and_log_cmd "sudo ln -sf /lib/systemd/system/mender.service \
        work/rootfs/etc/systemd/system/multi-user.target.wants/mender.service"
fi

if [ "${MENDER_GRUB_EFI_INTEGRATION}" == "y" ]; then
  run_and_log_cmd "wget -Nq '${MENDER_GRUBENV_URL}' -P work/"
  run_and_log_cmd "tar xvf work/${MENDER_GRUBENV_VERSION}.tar.gz -C work/"

  kernel_imagetype=$(probe_kernel_in_boot_and_root)
  initrd_imagetype=$(probe_initrd_in_boot_and_root)
  cat <<- EOF > work/grub-mender-grubenv-${MENDER_GRUBENV_VERSION}/mender_grubenv_defines
mender_rootfsa_part=${MENDER_ROOTFSA_PART}
mender_rootfsb_part=${MENDER_ROOTFSB_PART}
mender_kernel_root_base=${MENDER_KERNEL_ROOT_BASE}
mender_grub_storage_device=${MENDER_GRUB_STORAGE_DEVICE}
kernel_imagetype=${kernel_imagetype}
initrd_imagetype=${initrd_imagetype}
kernel_devicetree=${MENDER_KERNEL_DEVICETREE}
EOF

  if [ -n "${MENDER_GRUB_KERNEL_BOOT_ARGS}" ]; then
    cat <<- EOF > work/grub-mender-grubenv-${MENDER_GRUBENV_VERSION}/11_bootargs_grub.cfg
set bootargs="${MENDER_GRUB_KERNEL_BOOT_ARGS}"
EOF
  fi

  cd work/grub-mender-grubenv-${MENDER_GRUBENV_VERSION}
  run_and_log_cmd "make"
  run_and_log_cmd "sudo make DESTDIR=../ BOOT_DIR=boot install-boot-files"
  run_and_log_cmd "sudo make DESTDIR=../rootfs install-tools"
  cd - > /dev/null 2>&1

  # Remove conflicting boot files. These files do not necessarily effect the
  # functionality, but lets get rid of them to avoid confusion.
  #
  # There is no Mender integration for EFI boot or systemd-boot.
  sudo rm -rf work/boot/loader
  sudo rm -rf work/boot/EFI/Linux
  sudo rm -rf work/boot/EFI/systemd
  sudo rm -rf work/boot/NvVars

  log_info "Installing GRUB"

  arch=$(probe_arch)
  efi_name=$(probe_grub_efi_name)
  efi_target_name=$(probe_grub_efi_target_name)

  log_info "GRUB EFI: ${efi_target_name}"

  run_and_log_cmd "wget -Nq ${MENDER_GRUB_BINARY_STORAGE_URL}/${arch}/${efi_name} -P work/"
  run_and_log_cmd "wget -Nq ${MENDER_GRUB_BINARY_STORAGE_URL}/${arch}/grub-editenv -P work/"

  run_and_log_cmd "sudo install -m 751 work/grub-editenv work/rootfs/usr/bin/"

  run_and_log_cmd "sudo mkdir -p work/boot/EFI/BOOT"
  run_and_log_cmd "sudo cp work/${efi_name} -P work/boot/EFI/BOOT/${efi_target_name}"
fi

run_and_log_cmd "sudo mkdir -p work/rootfs/data/mender"
run_and_log_cmd "sudo ln -sf /data/mender work/rootfs/var/lib/mender"

cat <<- EOF > work/mender.conf.data
{
  "RootfsPartA": "${MENDER_KERNEL_ROOT_BASE}${MENDER_ROOTFSA_PART}",
  "RootfsPartB": "${MENDER_KERNEL_ROOT_BASE}${MENDER_ROOTFSB_PART}"
}
EOF

run_and_log_cmd "sudo cp work/mender.conf.data work/rootfs/data/mender/mender.conf"

if [ -z "${MENDER_DEVICE_TYPE}" ]; then
  # Observed systems who do not have this file, e.g images generated with mkosi
  if [ -f work/rootfs/etc/hostname ]; then
    device_type=$(cat work/rootfs/etc/hostname)
  else
    device_type="default"
  fi
else
  device_type="${MENDER_DEVICE_TYPE}"
fi

run_and_log_cmd "echo 'device_type=${device_type}' > work/device_type"
run_and_log_cmd "sudo cp work/device_type work/rootfs/data/mender/"
run_and_log_cmd "sudo echo 'artifact_name=${MENDER_ARTIFACT_NAME}' \
  > work/rootfs/etc/mender/artifact_info"

log_info "Installing a custom /etc/fstab (see work/convert.log for more info)"

run_and_log_cmd "sudo mkdir -p work/rootfs/${MENDER_BOOT_PART_MOUNTPOINT}"

sudo bash -c "cat <<- EOF > work/rootfs/etc/fstab
# stock fstab - you probably want to override this with a machine specific one
/dev/root            /                    auto       defaults              1  1
proc                 /proc                proc       defaults              0  0

${MENDER_KERNEL_ROOT_BASE}1   ${MENDER_BOOT_PART_MOUNTPOINT}          auto       defaults,sync    0  0
${MENDER_KERNEL_ROOT_BASE}4   /data          auto       defaults      0  0
EOF"

log_info "Performing platform specific modifications (if any)"
platform_modify

for overlay in "${overlays[@]}"; do
  log_info "Applying rootfs overlay: ${overlay}"
  run_and_log_cmd "sudo rsync --archive --keep-dirlinks --verbose ${overlay}/ work/rootfs/"
done
